#!/usr/bin/env bash
# kurbeScript â€” starts a local Kubernetes cluster with Minikube, verifies it, and lists pods.
# Works on Linux/macOS; prints guidance for Windows (use PowerShell + Chocolatey).
set -euo pipefail

log()  { printf "\033[1;32m%s\033[0m\n" "$*"; }
warn() { printf "\033[1;33m%s\033[0m\n" "$*"; }
err()  { printf "\033[1;31m%s\033[0m\n" "$*" >&2; }

OS="$(uname -s || true)"

need_cmd() {
  command -v "$1" >/dev/null 2>&1 || return 1
}

ensure_minikube() {
  if need_cmd minikube; then
    log "âœ… Minikube is installed: $(minikube version | head -n1)"
    return
  fi

  warn "Minikube not found â€” attempting installâ€¦"

  case "$OS" in
    Linux)
      if need_cmd curl && need_cmd sudo; then
        TMP="/tmp/minikube-linux-amd64"
        curl -fsSL -o "$TMP" https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install "$TMP" /usr/local/bin/minikube
        log "âœ… Minikube installed to /usr/local/bin/minikube"
      else
        err "curl/sudo missing. Install Minikube manually: https://minikube.sigs.k8s.io/docs/start/"
        exit 1
      fi
      ;;
    Darwin)
      if need_cmd brew; then
        brew install minikube
        log "âœ… Minikube installed via Homebrew"
      elif need_cmd curl && need_cmd sudo; then
        # Apple silicon uses a universal binary; this works for both
        TMP="/tmp/minikube-darwin-universal"
        curl -fsSL -o "$TMP" https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-universal
        sudo install "$TMP" /usr/local/bin/minikube
        log "âœ… Minikube installed to /usr/local/bin/minikube"
      else
        err "Homebrew/curl/sudo missing. Install Minikube manually: https://minikube.sigs.k8s.io/docs/start/"
        exit 1
      fi
      ;;
    MINGW*|MSYS*|CYGWIN*)
      err "Windows detected. Please install via PowerShell (Admin):"
      err "  choco install minikube kubernetes-cli -y"
      err "Then run this script using Git Bash or use PowerShell equivalents."
      exit 1
      ;;
    *)
      err "Unsupported OS ($OS). Install Minikube manually: https://minikube.sigs.k8s.io/docs/start/"
      exit 1
      ;;
  esac
}

# Use kubectl if installed, otherwise alias to 'minikube kubectl --'
ensure_kubectl_alias() {
  if need_cmd kubectl; then
    log "âœ… kubectl is installed: $(kubectl version --client --short 2>/dev/null || echo 'client detected')"
  else
    warn "kubectl not found â€” will use 'minikube kubectl --' as a fallback."
    kubectl() { minikube kubectl -- "$@"; }
    export -f kubectl
  fi
}

detect_driver() {
  if need_cmd docker; then
    echo "docker"
  elif need_cmd podman; then
    echo "podman"
  elif need_cmd VBoxManage; then
    echo "virtualbox"
  else
    echo ""
  fi
}

start_cluster() {
  local driver
  driver="$(detect_driver)"

  if [ -n "$driver" ]; then
    log "ðŸš€ Starting Minikube with driver: $driver"
    minikube start --driver="$driver" --wait=all
  else
    warn "No Docker/Podman/VirtualBox detected â€” letting Minikube choose."
    minikube start --wait=all
  fi

  log "ðŸ”„ Minikube status:"
  minikube status || true
}

verify_cluster_and_list_pods() {
  log "ðŸ”Ž Verifying cluster with 'kubectl cluster-info'â€¦"
  kubectl cluster-info

  log "ðŸ“¦ Pods in all namespaces:"
  kubectl get pods -A
}

main() {
  ensure_minikube
  ensure_kubectl_alias
  start_cluster
  verify_cluster_and_list_pods
  log "ðŸŽ‰ All done."
}

main "$@"
